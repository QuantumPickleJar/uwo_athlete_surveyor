// ignore_for_file: avoid_print

import 'package:athlete_surveyor/database.dart';
import 'package:athlete_surveyor/models/users/user_types.dart';
import 'package:athlete_surveyor/services/users/user_repository.dart';
import 'package:flutter/material.dart';
import 'package:postgres/postgres.dart';

class StudentsModel extends ChangeNotifier {
  final List<Student> students = [];
  final UserRepository userRepository;

  StudentsModel(this.userRepository);

//inserts students into the database 
Future<void> addStudentToDatabase(String firstName, String lastName, String grade, String sport, String email) async {
  try {
    Student newStudent = Student(
      userId: '', // This will be generated by the database
      username: email,
      firstName: firstName,
      lastName: lastName,
      grade: grade,
      sport: sport,
    );
    await userRepository.addStudentToDatabase(newStudent);
    students.add(newStudent); /// add the user locally so we don't perform a new GET
    notifyListeners();
    // await fetchStudentsFromDatabase(); // repopulate the list with the newly added student
  } catch (e) {
    print('Error adding student to database: $e');
    rethrow;
  }
}

  /// Fetches all students from the database, loading them into a [List]
  Future<void> fetchStudentsOverNetwork() async {
    try {
      final List<Student> fetchedStudents = await userRepository.fetchStudentsFromDatabase();
      students.clear();                     /// refreshing from an empty state
      students.addAll(fetchedStudents);     /// lazy-load into the model
      notifyListeners();                    /// update UI to reflect changes
    } catch (e) {
      print('Error fetching students: $e');
      rethrow;
    }
  }
  
  /// assuming the user_repository outmodes the students_model, left this deprecated annotation here.
  /// Please adjust accordingly so that this function's comment is logically true when read back; this
  /// may entail rewriting [fetchStudentsOverNetwork], as well as renaming this one to `populateStudentList`
  @Deprecated("Written with v1 student type, and before user_repository") 
  // ADDENDUM: updated to reflect the new student type, but left here for historical
  // Method to fetch students from the database
  Future<void> fetchStudentsFromDatabase() async {
    try {

      /// student_id, email, first_name, last_name, grade, sport FROM tbl_studentList"; 
      final Result result = await Database.fetchStudents();

      // Process the result and populate the students list
      for (final row in result) {
        final String studentId = row[0] as String;
        final String email = row[1] as String;
        final String firstName = row[2] as String;
        final String lastName = row[3] as String;
        final String grade = row[4] as String;
        final String sport = row[5] as String;
        final Student student = Student(
          userId: studentId,
          username: email, 
          firstName: firstName,
          lastName: lastName,
          grade: grade, sport: sport
        );
        students.add(student);
      }
      // Notify listeners that the data has been fetched
      notifyListeners();
    } catch (e) {
      print('Error fetching students: $e');
    }
  }

  // Method to add a student
  void addStudent(Student student) {
    students.add(student);
    notifyListeners();
  }
}

